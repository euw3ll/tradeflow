# docker-compose.yml
version: "3.8"

services:
  # Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: tradeflow_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      # Mapeia a porta 5432 do container para a 5432 da VPS.
      # Útil para conectar um cliente de DB externo, se necessário.
      - "5432:5432"

  # Serviço do Bot
  bot:
    # Constrói a imagem a partir do Dockerfile na pasta atual
    build: .
    container_name: tradeflow_bot
    restart: always
    volumes:
      # Persiste sessão do Telethon e (opcionalmente) logs
      - ./data:/data
      # Descomente se quiser logs no host: ./logs:/app/logs
    environment:
      # Passa a URL do banco para a aplicação.
      # Note que o host é 'db', o nome do serviço do banco de dados.
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      # ... Suas outras variáveis de ambiente (TELEGRAM_BOT_TOKEN, etc) virão do .env ...
    env_file:
      - .env
    depends_on:
      # Garante que o container do banco de dados inicie antes do bot
      - db

volumes:
  # Volume nomeado para persistir os dados do PostgreSQL
  postgres_data:
