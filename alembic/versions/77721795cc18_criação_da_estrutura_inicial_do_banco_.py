"""Criação da estrutura inicial do banco de dados

Revision ID: 77721795cc18
Revises: 
Create Date: 2025-08-24 00:25:45.337111

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '77721795cc18'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invite_codes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('monitored_targets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.BigInteger(), nullable=False),
    sa.Column('channel_name', sa.String(), nullable=True),
    sa.Column('topic_id', sa.BigInteger(), nullable=True),
    sa.Column('topic_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('topic_id')
    )
    op.create_table('pending_signals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('signal_data', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id'),
    sa.UniqueConstraint('user_telegram_id', 'symbol', name='_user_symbol_uc')
    )
    op.create_index(op.f('ix_pending_signals_symbol'), 'pending_signals', ['symbol'], unique=False)
    op.create_index(op.f('ix_pending_signals_user_telegram_id'), 'pending_signals', ['user_telegram_id'], unique=False)
    op.create_table('signals_for_approval',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('source_name', sa.String(), nullable=True),
    sa.Column('signal_data', sa.JSON(), nullable=False),
    sa.Column('approval_message_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_signals_for_approval_user_telegram_id'), 'signals_for_approval', ['user_telegram_id'], unique=False)
    op.create_table('trades',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('side', sa.String(), nullable=False),
    sa.Column('qty', sa.Float(), nullable=False),
    sa.Column('entry_price', sa.Float(), nullable=True),
    sa.Column('stop_loss', sa.Float(), nullable=True),
    sa.Column('current_stop_loss', sa.Float(), nullable=True),
    sa.Column('initial_targets', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('remaining_qty', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('closed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('closed_pnl', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('api_key_encrypted', sa.String(), nullable=True),
    sa.Column('api_secret_encrypted', sa.String(), nullable=True),
    sa.Column('entry_size_percent', sa.Float(), nullable=True),
    sa.Column('max_leverage', sa.Integer(), nullable=True),
    sa.Column('min_confidence', sa.Float(), nullable=True),
    sa.Column('approval_mode', sa.String(), nullable=False),
    sa.Column('daily_profit_target', sa.Float(), nullable=False),
    sa.Column('daily_loss_limit', sa.Float(), nullable=False),
    sa.Column('coin_whitelist', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('trades')
    op.drop_index(op.f('ix_signals_for_approval_user_telegram_id'), table_name='signals_for_approval')
    op.drop_table('signals_for_approval')
    op.drop_index(op.f('ix_pending_signals_user_telegram_id'), table_name='pending_signals')
    op.drop_index(op.f('ix_pending_signals_symbol'), table_name='pending_signals')
    op.drop_table('pending_signals')
    op.drop_table('monitored_targets')
    op.drop_table('invite_codes')
    # ### end Alembic commands ###
